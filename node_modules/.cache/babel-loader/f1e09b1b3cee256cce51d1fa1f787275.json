{"ast":null,"code":"var _jsxFileName = \"/Users/shubhamverma/Downloads/demofirebase/src/pages/AddContact.js\";\n// https://firebase.google.com/docs/storage/web/upload-files#full_example\n// https://www.npmjs.com/package/browser-image-resizer#asyncawait\nimport React, { useState, useContext, useEffect } from \"react\";\nimport firebase from \"firebase/app\";\nimport { Container, Form, FormGroup, Label, Input, Button, Spinner, Row, Col } from \"reactstrap\"; // to compress image before uploading to the server\n\nimport { readAndCompressImage } from \"browser-image-resizer\"; // configs for image resizing\n//TODO: DONE add image configurations\n\nimport { imageConfig } from \"../utils/config\";\nimport { MdAddCircleOutline } from \"react-icons/md\";\nimport { v4 } from \"uuid\"; // context stuffs\n\nimport { ContactContext } from \"../context/Context\";\nimport { CONTACT_TO_UPDATE } from \"../context/action.types\";\nimport { useHistory } from \"react-router-dom\";\nimport { toast } from \"react-toastify\";\n\nconst AddContact = () => {\n  // destructuring state and dispatch from context state\n  const {\n    state,\n    dispatch\n  } = useContext(ContactContext);\n  const {\n    contactToUpdate,\n    contactToUpdateKey\n  } = state; // history hooks from react router dom to send to different page\n\n  const history = useHistory(); // simple state of all component\n\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [phoneNumber, setPhoneNumber] = useState(\"\");\n  const [address, setAddress] = useState(\"\");\n  const [isUploading, setIsUploading] = useState(false);\n  const [downloadUrl, setDownloadUrl] = useState(null);\n  const [star, setStar] = useState(false);\n  const [isUpdate, setIsUpdate] = useState(false); // when their is the contact to update in the Context state\n  // then setting state with the value of the contact\n  // will changes only when the contact to update changes\n\n  useEffect(() => {\n    if (contactToUpdate) {\n      setName(contactToUpdate.name);\n      setEmail(contactToUpdate.email);\n      setPhoneNumber(contactToUpdate.phoneNumber);\n      setAddress(contactToUpdate.address);\n      setStar(contactToUpdate.star);\n      setDownloadUrl(contactToUpdate.picture); // also setting is update to true to make the update action instead the addContact action\n\n      setIsUpdate(true);\n    }\n  }, [contactToUpdate]); // To upload image to firebase and then set the the image link in the state of the app\n\n  const imagePicker = async e => {// TODO: upload image and set D-URL to state\n  }; // setting contact to firebase DB\n\n\n  const addContact = async () => {//TODO: add contact method\n  }; // to handle update the contact when there is contact in state and the user had came from clicking the contact update icon\n\n\n  const updateContact = async () => {//TODO: update contact method\n  }; // firing when the user click on submit button or the form has been submitted\n\n\n  const handleSubmit = e => {\n    e.preventDefault(); // isUpdate wll be true when the user came to update the contact\n    // when their is contact then updating and when no contact to update then adding contact\n    //TODO: set isUpdate value\n    // to handle the bug when the user visit again to add contact directly by visiting the link\n\n    dispatch({\n      type: CONTACT_TO_UPDATE,\n      payload: null,\n      key: null\n    }); // after adding/updating contact then sending to the contacts\n    // TODO :- also sending when their is any errors\n\n    history.push(\"/\");\n  }; // return the spinner when the image has been added in the storage\n  // showing the update / add contact based on the  state\n\n\n  return /*#__PURE__*/React.createElement(Container, {\n    fluid: true,\n    className: \"mt-5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    md: \"6\",\n    className: \"offset-md-3 p-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Form, {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 6\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"text-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }\n  }, isUploading ? /*#__PURE__*/React.createElement(Spinner, {\n    type: \"grow\",\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 9\n    }\n  }) : /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"imagepicker\",\n    className: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 10\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: downloadUrl,\n    alt: \"\",\n    className: \"profile\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"file\",\n    name: \"image\",\n    id: \"imagepicker\",\n    accept: \"image/*\",\n    multiple: false,\n    onChange: e => imagePicker(e),\n    className: \"hidden\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 10\n    }\n  }))), /*#__PURE__*/React.createElement(FormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    type: \"text\",\n    name: \"name\",\n    id: \"name\",\n    placeholder: \"Name\",\n    value: name,\n    onChange: e => setName(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 8\n    }\n  })), /*#__PURE__*/React.createElement(FormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    type: \"email\",\n    name: \"email\",\n    id: \"email\",\n    value: email,\n    onChange: e => setEmail(e.target.value),\n    placeholder: \"Email\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 8\n    }\n  })), /*#__PURE__*/React.createElement(FormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    type: \"number\",\n    name: \"number\",\n    id: \"phonenumber\",\n    value: phoneNumber,\n    onChange: e => setPhoneNumber(e.target.value),\n    placeholder: \"phone number\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 8\n    }\n  })), /*#__PURE__*/React.createElement(FormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    type: \"textarea\",\n    name: \"area\",\n    id: \"area\",\n    value: address,\n    onChange: e => setAddress(e.target.value),\n    placeholder: \"address\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 8\n    }\n  })), /*#__PURE__*/React.createElement(FormGroup, {\n    check: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    check: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 8\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    type: \"checkbox\",\n    onChange: () => {\n      setStar(!star);\n    },\n    checked: star,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 9\n    }\n  }), \" \", /*#__PURE__*/React.createElement(\"span\", {\n    className: \"text-right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 9\n    }\n  }, \"Mark as Star\"))), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    color: \"primary\",\n    block: true,\n    className: \"text-uppercase\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 7\n    }\n  }, isUpdate ? \"Update Contact\" : \"Add Contact\")))));\n};\n\nexport default AddContact;","map":{"version":3,"sources":["/Users/shubhamverma/Downloads/demofirebase/src/pages/AddContact.js"],"names":["React","useState","useContext","useEffect","firebase","Container","Form","FormGroup","Label","Input","Button","Spinner","Row","Col","readAndCompressImage","imageConfig","MdAddCircleOutline","v4","ContactContext","CONTACT_TO_UPDATE","useHistory","toast","AddContact","state","dispatch","contactToUpdate","contactToUpdateKey","history","name","setName","email","setEmail","phoneNumber","setPhoneNumber","address","setAddress","isUploading","setIsUploading","downloadUrl","setDownloadUrl","star","setStar","isUpdate","setIsUpdate","picture","imagePicker","e","addContact","updateContact","handleSubmit","preventDefault","type","payload","key","push","target","value"],"mappings":"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","sourcesContent":["// https://firebase.google.com/docs/storage/web/upload-files#full_example\n// https://www.npmjs.com/package/browser-image-resizer#asyncawait\n\nimport React, { useState, useContext, useEffect } from \"react\";\nimport firebase from \"firebase/app\";\n\nimport {\n\tContainer,\n\tForm,\n\tFormGroup,\n\tLabel,\n\tInput,\n\tButton,\n\tSpinner,\n\tRow,\n\tCol,\n} from \"reactstrap\";\n\n// to compress image before uploading to the server\nimport { readAndCompressImage } from \"browser-image-resizer\";\n\n// configs for image resizing\n//TODO: DONE add image configurations\nimport { imageConfig } from \"../utils/config\";\n\nimport { MdAddCircleOutline } from \"react-icons/md\";\n\nimport { v4 } from \"uuid\";\n\n// context stuffs\nimport { ContactContext } from \"../context/Context\";\nimport { CONTACT_TO_UPDATE } from \"../context/action.types\";\n\nimport { useHistory } from \"react-router-dom\";\n\nimport { toast } from \"react-toastify\";\n\nconst AddContact = () => {\n\t// destructuring state and dispatch from context state\n\tconst { state, dispatch } = useContext(ContactContext);\n\n\tconst { contactToUpdate, contactToUpdateKey } = state;\n\n\t// history hooks from react router dom to send to different page\n\tconst history = useHistory();\n\n\t// simple state of all component\n\tconst [name, setName] = useState(\"\");\n\tconst [email, setEmail] = useState(\"\");\n\tconst [phoneNumber, setPhoneNumber] = useState(\"\");\n\tconst [address, setAddress] = useState(\"\");\n\tconst [isUploading, setIsUploading] = useState(false);\n\tconst [downloadUrl, setDownloadUrl] = useState(null);\n\tconst [star, setStar] = useState(false);\n\tconst [isUpdate, setIsUpdate] = useState(false);\n\n\t// when their is the contact to update in the Context state\n\t// then setting state with the value of the contact\n\t// will changes only when the contact to update changes\n\tuseEffect(() => {\n\t\tif (contactToUpdate) {\n\t\t\tsetName(contactToUpdate.name);\n\t\t\tsetEmail(contactToUpdate.email);\n\t\t\tsetPhoneNumber(contactToUpdate.phoneNumber);\n\t\t\tsetAddress(contactToUpdate.address);\n\t\t\tsetStar(contactToUpdate.star);\n\t\t\tsetDownloadUrl(contactToUpdate.picture);\n\n\t\t\t// also setting is update to true to make the update action instead the addContact action\n\t\t\tsetIsUpdate(true);\n\t\t}\n\t}, [contactToUpdate]);\n\n\t// To upload image to firebase and then set the the image link in the state of the app\n\tconst imagePicker = async (e) => {\n\t\t// TODO: upload image and set D-URL to state\n\t};\n\n\t// setting contact to firebase DB\n\tconst addContact = async () => {\n\t\t//TODO: add contact method\n\t};\n\n\t// to handle update the contact when there is contact in state and the user had came from clicking the contact update icon\n\tconst updateContact = async () => {\n\t\t//TODO: update contact method\n\t};\n\n\t// firing when the user click on submit button or the form has been submitted\n\tconst handleSubmit = (e) => {\n\t\te.preventDefault();\n\n\t\t// isUpdate wll be true when the user came to update the contact\n\t\t// when their is contact then updating and when no contact to update then adding contact\n\t\t//TODO: set isUpdate value\n\n\t\t// to handle the bug when the user visit again to add contact directly by visiting the link\n\t\tdispatch({\n\t\t\ttype: CONTACT_TO_UPDATE,\n\t\t\tpayload: null,\n\t\t\tkey: null,\n\t\t});\n\n\t\t// after adding/updating contact then sending to the contacts\n\t\t// TODO :- also sending when their is any errors\n\t\thistory.push(\"/\");\n\t};\n\n\t// return the spinner when the image has been added in the storage\n\t// showing the update / add contact based on the  state\n\treturn (\n\t\t<Container fluid className=\"mt-5\">\n\t\t\t<Row>\n\t\t\t\t<Col md=\"6\" className=\"offset-md-3 p-2\">\n\t\t\t\t\t<Form onSubmit={handleSubmit}>\n\t\t\t\t\t\t<div className=\"text-center\">\n\t\t\t\t\t\t\t{isUploading ? (\n\t\t\t\t\t\t\t\t<Spinner type=\"grow\" color=\"primary\" />\n\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t<label htmlFor=\"imagepicker\" className=\"\">\n\t\t\t\t\t\t\t\t\t\t<img src={downloadUrl} alt=\"\" className=\"profile\" />\n\t\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\t\ttype=\"file\"\n\t\t\t\t\t\t\t\t\t\tname=\"image\"\n\t\t\t\t\t\t\t\t\t\tid=\"imagepicker\"\n\t\t\t\t\t\t\t\t\t\taccept=\"image/*\"\n\t\t\t\t\t\t\t\t\t\tmultiple={false}\n\t\t\t\t\t\t\t\t\t\tonChange={(e) => imagePicker(e)}\n\t\t\t\t\t\t\t\t\t\tclassName=\"hidden\"\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<FormGroup>\n\t\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\tname=\"name\"\n\t\t\t\t\t\t\t\tid=\"name\"\n\t\t\t\t\t\t\t\tplaceholder=\"Name\"\n\t\t\t\t\t\t\t\tvalue={name}\n\t\t\t\t\t\t\t\tonChange={(e) => setName(e.target.value)}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</FormGroup>\n\t\t\t\t\t\t<FormGroup>\n\t\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\t\ttype=\"email\"\n\t\t\t\t\t\t\t\tname=\"email\"\n\t\t\t\t\t\t\t\tid=\"email\"\n\t\t\t\t\t\t\t\tvalue={email}\n\t\t\t\t\t\t\t\tonChange={(e) => setEmail(e.target.value)}\n\t\t\t\t\t\t\t\tplaceholder=\"Email\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</FormGroup>\n\t\t\t\t\t\t<FormGroup>\n\t\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\t\ttype=\"number\"\n\t\t\t\t\t\t\t\tname=\"number\"\n\t\t\t\t\t\t\t\tid=\"phonenumber\"\n\t\t\t\t\t\t\t\tvalue={phoneNumber}\n\t\t\t\t\t\t\t\tonChange={(e) => setPhoneNumber(e.target.value)}\n\t\t\t\t\t\t\t\tplaceholder=\"phone number\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</FormGroup>\n\t\t\t\t\t\t<FormGroup>\n\t\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\t\ttype=\"textarea\"\n\t\t\t\t\t\t\t\tname=\"area\"\n\t\t\t\t\t\t\t\tid=\"area\"\n\t\t\t\t\t\t\t\tvalue={address}\n\t\t\t\t\t\t\t\tonChange={(e) => setAddress(e.target.value)}\n\t\t\t\t\t\t\t\tplaceholder=\"address\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</FormGroup>\n\t\t\t\t\t\t<FormGroup check>\n\t\t\t\t\t\t\t<Label check>\n\t\t\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\t\t\t\tonChange={() => {\n\t\t\t\t\t\t\t\t\t\tsetStar(!star);\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\tchecked={star}\n\t\t\t\t\t\t\t\t/>{\" \"}\n\t\t\t\t\t\t\t\t<span className=\"text-right\">Mark as Star</span>\n\t\t\t\t\t\t\t</Label>\n\t\t\t\t\t\t</FormGroup>\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\ttype=\"submit\"\n\t\t\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\t\t\tblock\n\t\t\t\t\t\t\tclassName=\"text-uppercase\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{isUpdate ? \"Update Contact\" : \"Add Contact\"}\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</Form>\n\t\t\t\t</Col>\n\t\t\t</Row>\n\t\t</Container>\n\t);\n};\n\nexport default AddContact;\n"]},"metadata":{},"sourceType":"module"}